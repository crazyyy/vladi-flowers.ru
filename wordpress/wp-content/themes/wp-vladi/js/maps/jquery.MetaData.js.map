{"version":3,"sources":["jquery.MetaData.js"],"names":["$","extend","metadata","defaults","type","name","cre","single","setType","this","get","elem","opts","settings","length","data","m","exec","className","getElementsByTagName","e","trim","innerHTML","undefined","getAttribute","attr","indexOf","eval","fn","jQuery"],"mappings":"CAwDA,SAAUA,GAERA,EAAEC,QACAC,UACEC,UACEC,KAAM,QACNC,KAAM,WACNC,IAAK,SACLC,OAAQ,YAEVC,QAAS,SAASJ,EAAMC,GACtBI,KAAKN,SAASC,KAAOA,EACrBK,KAAKN,SAASE,KAAOA,GAEvBK,IAAK,SAASC,KAAMC,MAClB,GAAIC,UAAWb,EAAEC,UAAWQ,KAAKN,SAAUS,KAEtCC,UAASN,OAAOO,SAAQD,SAASN,OAAS,WAE/C,IAAIQ,MAAOf,EAAEe,KAAKJ,KAAME,SAASN,OAEjC,IAAIQ,KAAM,MAAOA,KAIjB,IAFAA,KAAO,KAEc,SAAjBF,SAAST,KAAiB,CAC5B,GAAIY,GAAIH,SAASP,IAAIW,KAAKN,KAAKO,UAC3BF,KACFD,KAAOC,EAAE,QACN,IAAqB,QAAjBH,SAAST,KAAgB,CAClC,IAAKO,KAAKQ,qBAAsB,MAChC,IAAIC,GAAIT,KAAKQ,qBAAqBN,SAASR,KACvCe,GAAEN,SACJC,KAAOf,EAAEqB,KAAKD,EAAE,GAAGE,gBAChB,IAAyBC,QAArBZ,KAAKa,aAA2B,CACzC,GAAIC,MAAOd,KAAKa,aAAaX,SAASR,KAClCoB,QACFV,KAAOU,MASX,MANIV,MAAKW,QAAQ,KAAO,IACtBX,KAAO,IAAMA,KAAO,KAEtBA,KAAOY,KAAK,IAAMZ,KAAO,KAEzBf,EAAEe,KAAKJ,KAAME,SAASN,OAAQQ,MACvBA,SAcbf,EAAE4B,GAAG1B,SAAW,SAASU,GACvB,MAAOZ,GAAEE,SAASQ,IAAID,KAAK,GAAIG,KAGhCiB","file":"jquery.MetaData.js","sourcesContent":["/*\n * Metadata - jQuery plugin for parsing metadata from elements\n *\n * Copyright (c) 2006 John Resig, Yehuda Katz, JÃ¶rn Zaefferer, Paul McLanahan\n *\n * Dual licensed under the MIT and GPL licenses:\n *   http://www.opensource.org/licenses/mit-license.php\n *   http://www.gnu.org/licenses/gpl.html\n *\n * Revision: $Id$\n *\n */\n\n/**\n * Sets the type of metadata to use. Metadata is encoded in JSON, and each property\n * in the JSON will become a property of the element itself.\n *\n * There are three supported types of metadata storage:\n *\n *   attr:  Inside an attribute. The name parameter indicates *which* attribute.\n *\n *   class: Inside the class attribute, wrapped in curly braces: { }\n *\n *   elem:  Inside a child element (e.g. a script tag). The\n *          name parameter indicates *which* element.\n *\n * The metadata for an element is loaded the first time the element is accessed via jQuery.\n *\n * As a result, you can define the metadata type, use $(expr) to load the metadata into the elements\n * matched by expr, then redefine the metadata type and run another $(expr) for other elements.\n *\n * @name $.metadata.setType\n *\n * @example <p id=\"one\" class=\"some_class {item_id: 1, item_label: 'Label'}\">This is a p</p>\n * @before $.metadata.setType(\"class\")\n * @after $(\"#one\").metadata().item_id == 1; $(\"#one\").metadata().item_label == \"Label\"\n * @desc Reads metadata from the class attribute\n *\n * @example <p id=\"one\" class=\"some_class\" data=\"{item_id: 1, item_label: 'Label'}\">This is a p</p>\n * @before $.metadata.setType(\"attr\", \"data\")\n * @after $(\"#one\").metadata().item_id == 1; $(\"#one\").metadata().item_label == \"Label\"\n * @desc Reads metadata from a \"data\" attribute\n *\n * @example <p id=\"one\" class=\"some_class\"><script>{item_id: 1, item_label: 'Label'}</script>This is a p</p>\n * @before $.metadata.setType(\"elem\", \"script\")\n * @after $(\"#one\").metadata().item_id == 1; $(\"#one\").metadata().item_label == \"Label\"\n * @desc Reads metadata from a nested script element\n *\n * @param String type The encoding type\n * @param String name The name of the attribute to be used to get metadata (optional)\n * @cat Plugins/Metadata\n * @descr Sets the type of encoding to be used when loading metadata for the first time\n * @type undefined\n * @see metadata()\n */\n\n(function($) {\n\n  $.extend({\n    metadata: {\n      defaults: {\n        type: 'class',\n        name: 'metadata',\n        cre: /({.*})/,\n        single: 'metadata'\n      },\n      setType: function(type, name) {\n        this.defaults.type = type;\n        this.defaults.name = name;\n      },\n      get: function(elem, opts) {\n        var settings = $.extend({}, this.defaults, opts);\n        // check for empty string in single property\n        if (!settings.single.length) settings.single = 'metadata';\n\n        var data = $.data(elem, settings.single);\n        // returned cached data if it already exists\n        if (data) return data;\n\n        data = \"{}\";\n\n        if (settings.type == \"class\") {\n          var m = settings.cre.exec(elem.className);\n          if (m)\n            data = m[1];\n        } else if (settings.type == \"elem\") {\n          if (!elem.getElementsByTagName) return;\n          var e = elem.getElementsByTagName(settings.name);\n          if (e.length)\n            data = $.trim(e[0].innerHTML);\n        } else if (elem.getAttribute != undefined) {\n          var attr = elem.getAttribute(settings.name);\n          if (attr)\n            data = attr;\n        }\n\n        if (data.indexOf('{') < 0)\n          data = \"{\" + data + \"}\";\n\n        data = eval(\"(\" + data + \")\");\n\n        $.data(elem, settings.single, data);\n        return data;\n      }\n    }\n  });\n\n  /**\n   * Returns the metadata object for the first member of the jQuery object.\n   *\n   * @name metadata\n   * @descr Returns element's metadata object\n   * @param Object opts An object contianing settings to override the defaults\n   * @type jQuery\n   * @cat Plugins/Metadata\n   */\n  $.fn.metadata = function(opts) {\n    return $.metadata.get(this[0], opts);\n  };\n\n})(jQuery);\n"],"sourceRoot":"/source/"}