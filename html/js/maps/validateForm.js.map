{"version":3,"sources":["validateForm.js"],"names":[],"mappings":"","file":"validateForm.js","sourcesContent":["// Class validateForm ver 1.0.3\r// marketing@maxx-marketing.net\r/*\r  num = number (from 1 digit to 2 digit, when 1 digit - to tochne spivpadinnya)\r  nem = not empty\r  eq = equal - 2 polya vkazuvaty\r  em = email\r  nat = natural digit (>0)\r  reg = regular expression\r  chk - is checkbox checked\r  fl  = is float and>0\r  fl|em  = (is float and>0) or empty\r  notn = not null (for select)\r  eqne = value must equal and not empty\r  less = length muss less then %s symbols\r  more = length muss more then %s symbols\r  date = check is date\r  date|em = check is date or empty\r*/\r\rfunction validateForm(nameForm, arrayId, arrayType, arrayParams, arrayErrorMessages, typeShowError, css_class_error){\r   this.idEl = arrayId;\r   this.type = arrayType;\r   this.params = arrayParams;\r   this.messages = arrayErrorMessages;\r   this.errorsMsg = new Array();\r   this.errorId = new Array();\r   this.current = 0;\r   this.end = this.idEl.length;\r   this.errorMsg = '';\r   this.typeShowError = typeShowError; //1 = showErrors 2 = highlightFields 3 = 1 + 2\r   this.nameForm = nameForm;\r   if (css_class_error){\r    this.css_class_error = css_class_error;\r   }else{\r    this.css_class_error = 'fielderror';\r   }\r\r   this.addError = function(){\r      if (this.getType() == 'eqne' || this.getType() == 'eq'){\r        this.errorId[this.errorId.length] = this.getParam();\r      }\r      this.errorId[this.errorId.length] = this.getId();\r      this.errorsMsg[this.errorsMsg.length] = this.getMessage();\r   }\r\r   this.parseNumber = function(){\r      var reg = /^(\\d*),(\\d*)$/;\r      var pattern = (reg.test(this.getParam())) ?  (new RegExp('^(\\\\d){' + RegExp.$1 + ',' + RegExp.$2 + '}$')) : (new RegExp('^(\\\\d){' + this.getParam() + '}$'));\r      if (!pattern.test(this.getValue(0))){\r         this.addError();\r      }\r   }\r\r   this.checkNumber = function(pattern){\r\t  this.parseNumber();\r   }\r\r   this.checkFloat = function(){\r      var value = parseFloat(this.getValue(0));\r      if (isNaN(value) || value<=0) this.addError();\r   }\r\r   this.checkRegular = function(){\r     var pattern = new RegExp(this.getParam());\r     if (!pattern.test(this.getValue(0))) this.addError();\r   }\r\r   this.checkFloatOrEmpty = function(){\r      var value = parseFloat(this.getValue(0));\r      if (!this.checkNotEmptyFunc(this.getValue())) return true; else this.checkFloat();\r   }\r   \r   this.checkFloatOrEmptyOrZero = function(){\r       if (this.getValue(0)==0) return true; else this.checkFloatOrEmpty();\r   }\r\r   this.checkNotNull = function(){\r      if (this.getValue(0)==0) this.addError();\r   }\r\r   this.checkMoreLength = function(){\r   \tif (this.getValue(0).length<this.getParam()) this.addError();\r   }\r\r   this.checkLessLength = function(){\r   \tif (this.getValue(0).length>this.getParam()) this.addError();\r   }\r\r   this.checkEqualNotEmpty = function(notEmpty){\r      var element2 = this.getValue(0);\r      var element1 = this.getValue(this.getParam());\r      if (element1 != element2){\r      \t this.addError();\r      } else if (notEmpty) {\r      \t if (!this.checkNotEmptyFunc(element1)){\r            this.addError();\r         }\r      }\r   }\r\r   this.checkNotEmptyFunc = function(value){\r      var pattern = /\\S/;\r      return (value) ? (pattern.test(value)) : (pattern.test(this.getValue(0)));\r   }\r\r   this.checkNotEmpty = function(){\r    if (!this.checkNotEmptyFunc()){\r     \tthis.addError();\r     }\r   }\r\r   this.checkMail = function(){\r      var pattern = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\r\t  if (!pattern.test(this.getValue(0))){\r\t  \tthis.addError();\r\t  }\r   }\r\r   this.checkZipCode = function(){\r      var pattern = /\\S/;\r      if (!pattern.test(this.getValue(0)) ){\r          this.addError();\r      }\r   }\r\r   this.checkDate = function(){\r      var tempDate = this.getValue(0);\r      var pattern = new RegExp(\"^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})$\");\r      if (pattern.test(tempDate)){\r         var year = RegExp.$1;\r         var month = RegExp.$2;\r         var day = RegExp.$3;\r         if (month<1 || month>12){\r         \tthis.addError();\r         } else if (year>2099 || year<1900){\r            this.addError();\r         } else if (day<1 || day>31){\r         \tthis.addError();\r         }\r      }else{\r      \t this.addError();\r      }\r   }\r\r   this.checkDateOrEmpty = function(){\r      if (!this.checkNotEmptyFunc(this.getValue())) return true; else this.checkDate();\r   }\r\r   this.naturalNumber = function(){\r      var value = parseInt(this.getValue(0));\r      if (isNaN(value) || value<=0) this.addError();\r   }\r\r   this.checked = function(){\r   \t if (!this.$().checked) this.addError();\r   }\r\r   this.getType = function(){\r   \treturn this.type[this.current];\r   }\r\r   this.getForm = function(){\r   \treturn document.forms[nameForm];\r   }\r\r   this.getId = function(){\r   \treturn this.idEl[this.current];\r   }\r\r   this.getParam = function(){\r   \t   return this.params[this.current];\r   }\r\r   this.getMessage = function(){\r   \t   return this.messages[this.current];\r   }\r\r   this.getCurrent = function(){\r   \t   return this.idEl[this.current];\r   }\r\r   this.next = function(){\r   \t   this.current++;\r   }\r\r   this.notEnd = function(){\r   \t   return (this.current < this.end);\r   }\r\r   this.$ = function(idElement){\r       return (idElement) ? (document.getElementById(idElement)) : (document.getElementById(this.getCurrent()));\r   }\r\r   this.getValue = function(idElement){\r\t   if (!idElement){\r\t   \t  var element = this.$(this.getCurrent());\r\t   } else {\r\t      var element = this.$(idElement);\r\t   }\r\t   switch(element.type){\r\t   \t case 'select-one':\r\t       return element.options[element.selectedIndex].value;\r\t     break;\r\t     case 'radio':\r\t     case 'checkbox':\r\t       return element.checked;\r\t     break;\r\t     case 'text':\r\t     case 'password':\r\t     case 'textarea':\r\t       return element.value;\r\t     break;\r\t   }\r   }\r\r   this.validate = function(){\r     this.unhighlightFields();\r     while(this.notEnd()){\r     \tif (this.$(0)){\r          switch(this.getType()){\r        \t  case 'num':\r        \t    this.checkNumber();\r                break;\r              case 'nem':\r                this.checkNotEmpty();\r                break;\r              case 'em':\r                this.checkMail();\r                break;\r              case 'nat':\r                this.naturalNumber();\r                break;\r              case 'chk':\r                this.checked();\r                break;\r              case 'fl':\r                this.checkFloat();\r                break;\r              case 'fl|em':\r                this.checkFloatOrEmpty();\r              break;\r              case 'fl|em|0':\r                this.checkFloatOrEmptyOrZero();\r              break;\r              case 'notn':\r                this.checkNotNull();\r              break;\r              case 'eq':\r                this.checkEqualNotEmpty(0);\r              break;\r              case 'eqne':\r                this.checkEqualNotEmpty(1);\r              break;\r              case 'more':\r                this.checkMoreLength();\r              break;\r              case 'less':\r                this.checkLessLength();\r              break;\r              case 'date':\r                this.checkDate(this.getParam());\r              break;\r              case 'reg':\r                this.checkRegular();\r              break;\r              case 'date|em':\r                this.checkDateOrEmpty(this.getParam());\r              break;\r              case 'zip':\r                this.checkZipCode();\r              break;\r         }\r     \t}\r     \tthis.next();\r     }\r\r     if (this.errorsMsg.length){\r        this.$(this.errorId[0]).focus();\r        switch(this.typeShowError){\r        \tcase 1:\r                this.showErrors();\r        \tbreak;\r            case 2:\r                this.highlightFields();\r            break;\r            case 3:   \r                this.showErrors();\r            \tthis.highlightFields();\r            break;\r        }\r        return false;\r     }else{\r     \treturn true;\r     }\r   }\r\r   this.showErrors = function(){\r     var countErrors = this.errorsMsg.length;\r     for(var i=0;i<countErrors;i++){\r        this.errorMsg += this.errorsMsg[i]+\"\\n\";\r     }\r     alert(this.errorMsg);\r   }\r\r   this.unhighlightFields = function(){\r     var form = this.getForm();\r     var countElements = form.length;\r     for(i=0;i<countElements;i++){\r       \tif (form.elements[i].type == 'button' || form.elements[i].type == 'submit' || form.elements[i].type == 'hidden')\r       \t  continue;\r       \telse if (form.elements[i].type == 'checkbox'){\r          jQuery(form.elements[i].parentNode).removeClass(this.css_class_error);\r       \t}else{\r          jQuery(form.elements[i]).removeClass(this.css_class_error);\r        }\r     }\r   }\r\r   this.highlightFields = function(){\r     var countErrors = this.errorId.length;\r     for(var i=0;i<countErrors;i++){\r\t\t if (this.$(this.errorId[i]).type == 'checkbox'){\r            jQuery(this.$(this.errorId[i]).parentNode).addClass(this.css_class_error);\r\t\t }else{\r            jQuery(this.$(this.errorId[i])).addClass(this.css_class_error);\r\t\t }\r     }\r   }\r}"],"sourceRoot":"/source/"}