{"version":3,"sources":["jquery.MetaData.js"],"names":["$","extend","metadata","defaults","type","name","cre","single","setType","this","get","elem","opts","settings","length","data","m","exec","className","getElementsByTagName","e","trim","innerHTML","undefined","getAttribute","attr","indexOf","eval","fn","jQuery"],"mappings":"CAwDA,SAAUA,GAEVA,EAAEC,QACDC,UACCC,UACCC,KAAM,QACNC,KAAM,WACNC,IAAK,SACLC,OAAQ,YAETC,QAAS,SAAUJ,EAAMC,GACxBI,KAAKN,SAASC,KAAOA,EACrBK,KAAKN,SAASE,KAAOA,GAEtBK,IAAK,SAAUC,KAAMC,MACpB,GAAIC,UAAWb,EAAEC,UAAUQ,KAAKN,SAASS,KAEnCC,UAASN,OAAOO,SAASD,SAASN,OAAS,WAEjD,IAAIQ,MAAOf,EAAEe,KAAKJ,KAAME,SAASN,OAEjC,IAAKQ,KAAO,MAAOA,KAInB,IAFAA,KAAO,KAEe,SAAjBF,SAAST,KAAkB,CAC/B,GAAIY,GAAIH,SAASP,IAAIW,KAAMN,KAAKO,UAC3BF,KACJD,KAAOC,EAAE,QACJ,IAAsB,QAAjBH,SAAST,KAAiB,CACrC,IAAKO,KAAKQ,qBAAuB,MACjC,IAAIC,GAAIT,KAAKQ,qBAAqBN,SAASR,KACtCe,GAAEN,SACNC,KAAOf,EAAEqB,KAAKD,EAAE,GAAGE,gBACd,IAA0BC,QAArBZ,KAAKa,aAA4B,CAC5C,GAAIC,MAAOd,KAAKa,aAAcX,SAASR,KAClCoB,QACJV,KAAOU,MAST,MANKV,MAAKW,QAAS,KAAO,IAC1BX,KAAO,IAAMA,KAAO,KAEpBA,KAAOY,KAAK,IAAMZ,KAAO,KAEzBf,EAAEe,KAAMJ,KAAME,SAASN,OAAQQ,MACxBA,SAcVf,EAAE4B,GAAG1B,SAAW,SAAUU,GACzB,MAAOZ,GAAEE,SAASQ,IAAKD,KAAK,GAAIG,KAG9BiB","file":"jquery.MetaData.js","sourcesContent":["/*\r\n * Metadata - jQuery plugin for parsing metadata from elements\r\n *\r\n * Copyright (c) 2006 John Resig, Yehuda Katz, Jï¿½rn Zaefferer, Paul McLanahan\r\n *\r\n * Dual licensed under the MIT and GPL licenses:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *   http://www.gnu.org/licenses/gpl.html\r\n *\r\n * Revision: $Id$\r\n *\r\n */\r\n\r\n/**\r\n * Sets the type of metadata to use. Metadata is encoded in JSON, and each property\r\n * in the JSON will become a property of the element itself.\r\n *\r\n * There are three supported types of metadata storage:\r\n *\r\n *   attr:  Inside an attribute. The name parameter indicates *which* attribute.\r\n *          \r\n *   class: Inside the class attribute, wrapped in curly braces: { }\r\n *   \r\n *   elem:  Inside a child element (e.g. a script tag). The\r\n *          name parameter indicates *which* element.\r\n *          \r\n * The metadata for an element is loaded the first time the element is accessed via jQuery.\r\n *\r\n * As a result, you can define the metadata type, use $(expr) to load the metadata into the elements\r\n * matched by expr, then redefine the metadata type and run another $(expr) for other elements.\r\n * \r\n * @name $.metadata.setType\r\n *\r\n * @example <p id=\"one\" class=\"some_class {item_id: 1, item_label: 'Label'}\">This is a p</p>\r\n * @before $.metadata.setType(\"class\")\r\n * @after $(\"#one\").metadata().item_id == 1; $(\"#one\").metadata().item_label == \"Label\"\r\n * @desc Reads metadata from the class attribute\r\n * \r\n * @example <p id=\"one\" class=\"some_class\" data=\"{item_id: 1, item_label: 'Label'}\">This is a p</p>\r\n * @before $.metadata.setType(\"attr\", \"data\")\r\n * @after $(\"#one\").metadata().item_id == 1; $(\"#one\").metadata().item_label == \"Label\"\r\n * @desc Reads metadata from a \"data\" attribute\r\n * \r\n * @example <p id=\"one\" class=\"some_class\"><script>{item_id: 1, item_label: 'Label'}</script>This is a p</p>\r\n * @before $.metadata.setType(\"elem\", \"script\")\r\n * @after $(\"#one\").metadata().item_id == 1; $(\"#one\").metadata().item_label == \"Label\"\r\n * @desc Reads metadata from a nested script element\r\n * \r\n * @param String type The encoding type\r\n * @param String name The name of the attribute to be used to get metadata (optional)\r\n * @cat Plugins/Metadata\r\n * @descr Sets the type of encoding to be used when loading metadata for the first time\r\n * @type undefined\r\n * @see metadata()\r\n */\r\n\r\n(function($) {\r\n\r\n$.extend({\r\n\tmetadata : {\r\n\t\tdefaults : {\r\n\t\t\ttype: 'class',\r\n\t\t\tname: 'metadata',\r\n\t\t\tcre: /({.*})/,\r\n\t\t\tsingle: 'metadata'\r\n\t\t},\r\n\t\tsetType: function( type, name ){\r\n\t\t\tthis.defaults.type = type;\r\n\t\t\tthis.defaults.name = name;\r\n\t\t},\r\n\t\tget: function( elem, opts ){\r\n\t\t\tvar settings = $.extend({},this.defaults,opts);\r\n\t\t\t// check for empty string in single property\r\n\t\t\tif ( !settings.single.length ) settings.single = 'metadata';\r\n\t\t\t\r\n\t\t\tvar data = $.data(elem, settings.single);\r\n\t\t\t// returned cached data if it already exists\r\n\t\t\tif ( data ) return data;\r\n\t\t\t\r\n\t\t\tdata = \"{}\";\r\n\t\t\t\r\n\t\t\tif ( settings.type == \"class\" ) {\r\n\t\t\t\tvar m = settings.cre.exec( elem.className );\r\n\t\t\t\tif ( m )\r\n\t\t\t\t\tdata = m[1];\r\n\t\t\t} else if ( settings.type == \"elem\" ) {\r\n\t\t\t\tif( !elem.getElementsByTagName ) return;\r\n\t\t\t\tvar e = elem.getElementsByTagName(settings.name);\r\n\t\t\t\tif ( e.length )\r\n\t\t\t\t\tdata = $.trim(e[0].innerHTML);\r\n\t\t\t} else if ( elem.getAttribute != undefined ) {\r\n\t\t\t\tvar attr = elem.getAttribute( settings.name );\r\n\t\t\t\tif ( attr )\r\n\t\t\t\t\tdata = attr;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( data.indexOf( '{' ) <0 )\r\n\t\t\tdata = \"{\" + data + \"}\";\r\n\t\t\t\r\n\t\t\tdata = eval(\"(\" + data + \")\");\r\n\t\t\t\r\n\t\t\t$.data( elem, settings.single, data );\r\n\t\t\treturn data;\r\n\t\t}\r\n\t}\r\n});\r\n\r\n/**\r\n * Returns the metadata object for the first member of the jQuery object.\r\n *\r\n * @name metadata\r\n * @descr Returns element's metadata object\r\n * @param Object opts An object contianing settings to override the defaults\r\n * @type jQuery\r\n * @cat Plugins/Metadata\r\n */\r\n$.fn.metadata = function( opts ){\r\n\treturn $.metadata.get( this[0], opts );\r\n};\r\n\r\n})(jQuery);"],"sourceRoot":"/source/"}